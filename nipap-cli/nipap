#! /usr/bin/python
""" NIPAP shell command

    A shell command to interact with NIPAP.
"""
import logging
import sys

import nipap_cli
import nipap_cli.nipap_cli
from nipap_cli.command import Command, CommandError
from pynipap import NipapError

import codecs
# do UTF-8 output for redirected stdout
if sys.stdout.encoding is None:
    # if encoding is None it means Python hasn't been able to determine the
    # encoding from the terminal, so we are probably being redirected and so we
    # default to UTF-8
    sys.stdout = codecs.getwriter('utf8')(sys.stdout)

# early close of stdout to avoid broken pipe, see #464
# If our output is being piped and the receiver of the pipe is killed off before
# us there won't be a pipe anymore and Python will print an ugly "broken pipe"
# backtrace that could look a bit different depending on which version of Python
# we are running on. To avoid this, we register an atexit handler which will try
# to close stdout before we exit.
import atexit
@atexit.register
def at_exit():
    try:
        sys.stdout.close()
    except:
        pass


class NullHandler(logging.Handler):
    """ A NULL logging handler

        Discards all log messages passed to it.
    """

    def emit(self, record):
        pass



if __name__ == '__main__':
    logger = logging.getLogger()
    nullh = NullHandler()
    logger.addHandler(nullh)

    import argparse
    parser = argparse.ArgumentParser(description='NIPAP command-line client')
    parser.add_argument("--version", action="store_true", help="display version information and exit")
    parser.add_argument("-f", "--force", action="store_true", help="disable interactive prompting of actions")

    args, unknown_args = parser.parse_known_args()

    if args.version:
        import pynipap
        print "nipap CLI client version:", nipap_cli.__version__
        print "pynipap version:", pynipap.__version__

        nipapd_version = 'unknown'
        try:
            pynipap.xmlrpc_uri = "http://%(username)s:%(password)s@%(hostname)s:%(port)s" % {
                    'username': nipap_cli.nipap_cli.cfg.get('global', 'username'),
                    'password': nipap_cli.nipap_cli.cfg.get('global', 'password'),
                    'hostname': nipap_cli.nipap_cli.cfg.get('global', 'hostname'),
                    'port'    : nipap_cli.nipap_cli.cfg.get('global', 'port')
                }
            ao = pynipap.AuthOptions({'authoritative_source': 'nipap'})
            nipapd_version = pynipap.nipapd_version()
        except:
            pass

        print "nipapd version:", nipapd_version

        sys.exit(0)

    try:
        cmd = Command(nipap_cli.nipap_cli.cmds, args)
    except (ValueError, CommandError, NipapError) as exc:
        print >> sys.stderr, "Error: %s" % str(exc)
        sys.exit(1)

    # execute command
    if cmd.exe is None:
        print "Incomplete command specified"
        print "valid completions: %s" % " ".join(cmd.next_values())
        sys.exit(1)

    try:
        cmd.exe(cmd.arg, cmd.exe_options, options)
    except KeyboardInterrupt:
        sys.exit(130)
    except (IOError, OSError):
        sys.exit(141)
    except NipapError as exc:
        print >> sys.stderr, "Command failed:\n  %s" % str(exc)
        sys.exit(1)

