#! /usr/bin/python
#
# Manages NIPAP LocalAuth authentication database
#

import sys
import os
import optparse
import logging

import nipap.authlib
from nipap.nipapconfig import NipapConfig

if __name__ == '__main__':

    # parse options
    parser = optparse.OptionParser()
    parser.add_option('-a', '--add', dest='add_user', type='string', help='add user ADD_USER')
    parser.add_option('-d', '--delete', dest='delete_user', type='string', help="delete user DELETE_USER")
    parser.add_option('-f', '--file', dest='db_file', type='string', help="database file [default: read from config]")
#    parser.add_option('-m', '--modify', dest='modify_user', type='string')
    parser.add_option('-p', '--password', dest='password', type='string', help='set user\'s password to PASSWORD')
    parser.add_option('-l', '--list', action='store_true', dest='list', help='list users')
    parser.add_option('-t', '--trusted', action='store_true', dest='trusted', default=False, help='mark user as trusted')
    parser.add_option('-n', '--name', dest='name', type='string', help='set user\'s name to NAME')
    parser.add_option('-c', '--config', dest='config', default='/etc/nipap/nipap.conf', type='string', help=
            'read configuration from CONFIG [default:/etc/nipap/nipap.conf]')
    options, args = parser.parse_args()

    logger = logging.getLogger()
    log_format = "%(levelname)-8s %(message)s"
    log_stream = logging.StreamHandler()
    log_stream.setFormatter(logging.Formatter("%(asctime)s: " + log_format))
    logger.setLevel(logging.WARNING)
    logger.addHandler(log_stream)

    cfg = NipapConfig(options.config)

    if options.db_file:
        cfg.set('auth.backends.local', 'db_path', options.db_file)

    a = nipap.authlib.SqliteAuth('local', 'a', 'b', 'c')

    if options.list:
        # print a nicely formatted list of users
        header =  "%-20s %-25s %-7s" % ('username', 'real name', 'trusted')
        print "%s\n%s" % (header,''.join('-' for x in range(len(header))))
        for u in a.list_users():
            print "%-20s %-25s %-7d" % (u['username'], u['full_name'], int(u['trusted']))

    elif options.add_user:
        if not options.password:
            print "Please specify password with --password"
            sys.exit(1)
        if not options.name:
            print "Please specify name with --name"
            sys.exit(1)

        a.add_user(options.add_user, options.password, options.name, options.trusted)
        print "Added user %s to database %s" % (options.add_user, cfg.get('auth.backends.local','db_path'))

    elif options.delete_user:
        a.remove_user(options.delete_user)
        print "User %s deleted from database %s" % (options.delete_user, cfg.get('auth.backends.local', 'db_path'))

    else:
        parser.print_help()
