#! /usr/bin/python
#
# Manages NIPAP LocalAuth authentication database
#

import sys
import os
import argparse
import logging

import nipap.authlib
from nipap.nipapconfig import NipapConfig

if __name__ == '__main__':

    # parse arguments & options
    parser = argparse.ArgumentParser(description='NIPAP User configuration')
    parser.add_argument('action', metavar='{list, add, delete}', nargs='?', type=str, choices=['list', 'add', 'delete'], help='define an action to execute')
    parser.add_argument('-u', '--user', dest='user', type=str, help='username')
    parser.add_argument('-p', '--password', dest='password', type=str, help='set user\'s password to PASSWORD')
    parser.add_argument('-n', '--name', dest='name', type=str, help='set user\'s name to NAME')
    parser.add_argument('-t', '--trusted', action='store_true', dest='trusted', default=False, help='mark user as trusted')
    parser.add_argument('-r', '--readonly', action='store_true', dest='readonly', default=False, help='set user to read only')
    parser.add_argument('-f', '--file', dest='db_file', type=str, help="database file [default: read from config]")
    parser.add_argument('-c', '--config', dest='config', default='/etc/nipap/nipap.conf', type=str, help=
            'read configuration from CONFIG [default:/etc/nipap/nipap.conf]')
    parser.add_argument('--version', action='version', version='nipap-passwd version %s' % nipap.__version__)
    args = parser.parse_args()

    logger = logging.getLogger()
    log_format = "%(levelname)-8s %(message)s"
    log_stream = logging.StreamHandler()
    log_stream.setFormatter(logging.Formatter("%(asctime)s: " + log_format))
    logger.setLevel(logging.WARNING)
    logger.addHandler(log_stream)

    cfg = NipapConfig(args.config)

    if args.db_file:
        cfg.set('auth.backends.local', 'db_path', args.db_file)

    a = nipap.authlib.SqliteAuth('local', 'a', 'b', 'c')

    if args.action == 'list':
        # print a nicely formatted list of users
        header =  "%-20s %-25s %-7s %-7s" % ('username', 'real name', 'trusted', 'read only') 
        print "%s\n%s" % (header,''.join('-' for x in range(len(header))))
        for u in a.list_users():
            if not args.user or args.user == u['username']:
                print "%-20s %-25s %-7d %-7d" % (u['username'], u['full_name'], int(u['trusted']), int(u['readonly'])) 
    
    elif args.action == 'add':
        if not args.user:
            print "Please specify user with --user"
            sys.exit(1)
        if not args.password:
            print "Please specify password with --password"
            sys.exit(1)
        if not args.name:
            print "Please specify name with --name"
            sys.exit(1)
        try:
            a.add_user(args.user, args.password, args.name, args.trusted, args.readonly)
            print "Added user %s to database %s" % (args.user, cfg.get('auth.backends.local','db_path'))
        except nipap.authlib.AuthError as exc:
            if str(exc) == 'attempt to write a readonly database':
                print "You do not have sufficient rights to write to database: %s" % (cfg.get('auth.backends.local','db_path'))
            elif str(exc) == 'column username is not unique':
                print "Username '%s' already exists in the database: %s " % (args.user, cfg.get('auth.backends.local','db_path'))
            else:
                print exc
                    
    elif args.action == 'delete':
        try:
            if not args.user:
                print "Please specify user with --user"
                sys.exit(1)
            a.remove_user(args.user)
            print "User %s deleted from database %s" % (args.user, cfg.get('auth.backends.local', 'db_path'))
        except nipap.authlib.AuthError as exc:
            if str(exc) == 'attempt to write a readonly database':
                print "You do not have sufficient rights to write to database: %s" % (cfg.get('auth.backends.local','db_path'))
            else:
                print exc

    else:
        parser.print_help()
