#!/usr/bin/env python
# vim: et sw=4 sts=4 :

import fcntl
import logging
import logging.handlers
import argparse
import os
import sys
import ConfigParser

from tornado.netutil import bind_sockets
from tornado.httpserver import HTTPServer
from tornado.wsgi import WSGIContainer
import tornado.process
from tornado.ioloop import IOLoop

from nipap.nipapconfig import NipapConfig, NipapConfigError
from nipap.backend import NipapError

import psutil
import signal
import atexit

def exit_cleanup():
    """ Cleanup stuff on program exit
    """
    # stop the main tornado loop
    IOLoop.instance().stop()
    # find all our child processes and kill them off
    try:
        p = psutil.Process(os.getpid())
    except psutil.NoSuchProcess:
        return
    for pid in p.get_children(recursive=True):
        os.kill(pid.pid, signal.SIGTERM)


@atexit.register
def at_exit():
    exit_cleanup()


def handle_sigterm(sig, frame):
    """ Handle SIGTERM
    """
    exit_cleanup()
    # and make a clean exit ourselves
    #sys.exit(0)

# register signal handler for SIGTERM
signal.signal(signal.SIGTERM, handle_sigterm)



def drop_privileges(uid_name='nobody', gid_name='nogroup'):
    if os.getuid() != 0:
        raise NipapError("non-root user cannot drop privileges")

    import pwd, grp
    # Get the uid/gid from the name
    uid = pwd.getpwnam(uid_name).pw_uid
    gid = grp.getgrnam(gid_name).gr_gid

    # Remove group privileges
    os.setgroups([])

    # Try setting the new uid/gid
    os.setgid(gid)
    os.setuid(uid)

    # Ensure a very conservative umask
    old_umask = os.umask(0o077)


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='NIPAP backend server')
    parser.add_argument('-d', '--debug', action='store_true', dest='debug', help='enable debugging')
    parser.add_argument('-f', '--foreground', action='store_true', dest='foreground', help='run in foreground and log to stdout')
    parser.add_argument('-l', '--listen', type=str, metavar='ADDRESS', help='listen to IPv4/6 ADDRESS')
    parser.add_argument('-p', '--port', dest='port', type=int, help='listen on TCP port PORT')
    parser.add_argument('-c', '--config', dest='config_file', type=str, default='/etc/nipap/nipap.conf', help='read configuration from file CONFIG_FILE')
    parser.add_argument('-P', '--pid-file', type=str, help='write a PID file to PID_FILE')
    parser.add_argument('--no-pid-file', action='store_true', default=False, help='turn off writing PID file (overrides config file)')
    parser.add_argument('--version', action='store_true', help='display version information and exit')
    parser.add_argument("--db-version", dest="dbversion", action="store_true", help="display database schema version information and exit")
    # Arguments overwriting config settings
    cfg_args = [ 'debug', 'foreground', 'port', 'config_file' ]

    args = parser.parse_args()

    if args.version:
        import nipap
        print "nipapd version:", nipap.__version__
        sys.exit(0)

    # set logging format
    LOG_FORMAT = "%(asctime)s: %(module)-10s %(levelname)-8s %(message)s"
    # setup basic logging
    logging.basicConfig(format=LOG_FORMAT)
    logger = logging.getLogger()

    default = {
        'syslog': 'false',
        'debug': 'false',
        'foreground': 'false',
        'forks': 0,
        'pid_file': None,
        'listen': '127.0.0.1',
        'port': '1337',
        'db_host': 'localhost',
        'db_name': 'nipap',
        'db_port': None,
        'db_user': 'nipap',
        'db_pass': 'papin',
        'db_sslmode': 'require',
        'auth_cache_timeout': '3600',
        'user': None,
        'group': None
    }

    try:
        cfg = NipapConfig(args.config_file, default)
    except NipapConfigError, exc:
        if args.config_file:
            print >> sys.stderr, "The specified configuration file ('" + args.config_file + "') does not exist"
            sys.exit(1)
        # if no config file is specified, we'll live with our defaults

    # Go through list of argparse args and set the config object to
    # their values.
    for arg_dest in cfg_args:
        # This is not very pretty... but how can I otherwise access elements
        # in the args object from variables?
        try:
            if eval('args.' + arg_dest) is None:
                continue
        except AttributeError:
            continue

        try:
            cfg.set('nipapd', arg_dest, str(eval("args." + arg_dest)))
        except ConfigParser.NoSectionError as exc:
            print >> sys.stderr, "The configuration file contains errors:", exc
            sys.exit(1)

    # drop privileges
    if cfg.get('nipapd', 'user') is not None:
        run_user = cfg.get('nipapd', 'user')
        if cfg.get('nipapd', 'group') is not None:
            run_group = cfg.get('nipapd', 'group')
        else:
            run_group = cfg.get('nipapd', 'user')
        try:
            drop_privileges(run_user, run_group)
        except NipapError:
            print >> sys.stderr, ("nipapd is configured to drop privileges and run as user '%s' and group '%s', \n"
                        "but was not started as root and can therefore not drop privileges") % (run_user, run_group)
            sys.exit(1)
        except KeyError:
            print >> sys.stderr, "Could not drop privileges to user '%s' and group '%s'" % (run_user, run_group)
            sys.exit(1)

    from nipap.backend import Nipap
    try:
        nip = Nipap()
    except NipapError as exc:
        print >> sys.stderr, str(exc)
        sys.exit(1)

    if args.dbversion:
        print "nipap db schema:", nip._get_db_version()
        sys.exit(0)

    # check nipap database schema version
    import nipap
    current_db_version = nip._get_db_version()
    if current_db_version != nipap.__db_version__:
        print >> sys.stderr, "NIPAP PostgreSQL database is outdated. Schema version '%s' is required to run but you are using '%s'" % (nipap.__db_version__, current_db_version)
        sys.exit(1)

    # check local auth db version
    from nipap import authlib
    a = authlib.SqliteAuth('local', 'a', 'b', 'c')
    try:
        latest = a._latest_db_version()
        if not latest:
            print >> sys.stderr, "It seems your Sqlite database for local auth is out of date"
            print >> sys.stderr, "Please run 'nipap-passwd --upgrade-database' to upgrade your database."
            sys.exit(2)
    except authlib.AuthSqliteError, e:
        print >> sys.stderr, "Error checking version of Sqlite database for local auth: %s" % e
        sys.exit(1)
    del a


    if not cfg.getboolean('nipapd', 'foreground'):
        import nipap.daemon
        ret = nipap.daemon.createDaemon()

    # pid file handling
    if cfg.get('nipapd', 'pid_file') and not args.no_pid_file:
        # need a+ to be able to read PID from file
        try:
            lf = open(cfg.get('nipapd', 'pid_file'), 'a+', 0)
        except IOError, exc:
            logger.error("Unable to open PID file '" + str(exc.filename) + "': " + str(exc.strerror))
            sys.exit(1)
        try:
            fcntl.flock(lf, fcntl.LOCK_EX | fcntl.LOCK_NB)
        except IOError:
            logger.error('NIPAPd already running (pid: ' + lf.read().strip() + ')')
            sys.exit(1)
        logger.debug('Writing PID to file: ' + cfg.get('nipapd', 'pid_file'))
        lf.truncate()
        lf.write('%d\n' % os.getpid())
        lf.flush()

    import nipap.xmlrpc
    nipapxml = nipap.xmlrpc.setup()

    if not cfg.getboolean('nipapd', 'foreground'):
        # If we are not running in the foreground, remove current handlers which
        # include a default streamhandler to stdout to prevent messages on
        # stdout when in daemon mode.
        for h in logger.handlers:
            logger.removeHandler(h)

    # logging
    if cfg.getboolean('nipapd', 'debug'):
        logger.setLevel(logging.DEBUG)
        nipapxml.logger.setLevel(logging.DEBUG)

    if cfg.getboolean('nipapd', 'syslog'):
        log_syslog = logging.handlers.SysLogHandler(address = '/dev/log')
        log_syslog.setFormatter(logging.Formatter("%(levelname)-8s %(message)s"))
        logger.addHandler(log_syslog)
        nipapxml.logger.addHandler(log_syslog)

    if cfg.get('nipapd', 'listen') is None or cfg.get('nipapd', 'listen') == '':
        sockets = bind_sockets(cfg.get('nipapd', 'port'))
    else:
        sockets = []
        for entry in cfg.get('nipapd', 'listen').split(','):
            if len(entry.split('+')) > 1:
                address = entry.split('+')[0]
                port = int(entry.split('+')[1])
            else:
                address = entry
                port = int(cfg.get('nipapd', 'port'))
            socket = bind_sockets(port, address)
            sockets = sockets + socket

    num_forks = -1
    try:
        if cfg.getint('nipapd', 'forks') == 0:
            num_forks = None
        elif cfg.getint('nipapd', 'forks') > 0:
            num_forks = cfg.getint('nipapd', 'forks')
    except:
        pass

    # pre-fork if we are not running in foreground
    if not cfg.getboolean('nipapd', 'foreground') and num_forks >= 0:
        # default is to fork as many processes as there are cores
        tornado.process.fork_processes(num_forks)

    http_server = HTTPServer(WSGIContainer(nipapxml))
    http_server.add_sockets(sockets)

    # start Tornado
    try:
        IOLoop.instance().start()
    except KeyboardInterrupt:
        sys.exit(0)
    except Exception as exc:
        logger.error(exc)
        sys.exit(1)
