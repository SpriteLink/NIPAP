#!/bin/sh

#set -e

# Source debconf library.
. /usr/share/debconf/confmodule

DB_USER='nipap'
DB_PASS=`</dev/urandom tr -dc [:alpha:] | head -c16`
DB_NAME='nipap'


POSTGRES_INSTALLED=0
POSTGRES_RUNNING=0
NIPAP_DB_EXISTS=0
NIPAP_DB_VERSION=0

# the most current DB version and the one that we are about to install
CURRENT_DB_VERSION=5

# determine if postgres is installed
su postgres -c 'psql --version' > /dev/null 2>&1
if [ $? -eq 0 ]; then
	POSTGRES_INSTALLED=1

	su postgres -c "psql -c '\l+'" >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		POSTGRES_RUNNING=1
		# does the NIPAP database exist?
		if [ "`su postgres -c "psql -c '\l+'" | awk -F"|" '{ if ($1~/^ *nipap *$/) { gsub(/^ */, "", $1); gsub(/ *$/, "", $1); print $1 } }'`" = "nipap" ]; then
			NIPAP_DB_EXISTS=1

			# figure out version of db
			DB_COMMENT=`su postgres -c "psql -c '\l+'" | awk -F"|" '{ if ($1~/^ *nipap *$/) { print $9 } }'`
			echo "$DB_COMMENT" | grep "schema version: [0-9]\+$" > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				# seems to be a DB comment with proper version
				NIPAP_DB_VERSION=`echo $DB_COMMENT | sed 's/.*schema version: //'`
			fi
		fi
	fi
fi



case "$1" in
	configure)
		# create group / user for nipapd
		if [ -z "`getent passwd nipap`" ]; then
			adduser --quiet --system --group --no-create-home nipap
		fi

		# autostart
		db_get nipapd/startup
		if [ "$RET" = "true" ]; then
			sed -i -e 's/RUN=.*/RUN=yes/' /etc/default/nipapd
			update-rc.d nipapd defaults >/dev/null 2>&1
		else
			sed -i -e 's/RUN=.*/RUN=no/' /etc/default/nipapd
			update-rc.d nipapd remove >/dev/null 2>&1
		fi

		# if database isn't running
		if [ $POSTGRES_RUNNING -eq 0 ]; then
			# are we asked to upgrade?
			db_get nipapd/upgrade
			if [ "$RET" = "true" ]; then
				echo "PostgreSQL is not running. Unable to upgrade the NIPAP database structure." >&2
			fi

			# are we asked to automagically install?
			db_get nipapd/autoconf
			if [ "$RET" = "true" ]; then
				echo "PostgreSQL is not running. Unable to load the NIPAP database structure." >&2
			fi

		else # db is running, let's load some db files or upgrade!
			# upgrade!
			if [ $NIPAP_DB_EXISTS -eq 1 ]; then
				# should we do the upgrade dance?
				db_get nipapd/upgrade
				if [ "$RET" = "true" ]; then
					# load latest NIPAP database functions
					echo -n "Loading NIPAP SQL database functions..."
					su -c "psql -q -d $DB_NAME -f /usr/share/nipap/sql/functions.plsql" postgres >/dev/null 2>&1 && echo "DONE"

					# iterate through and upgrade in steps of one version at a time
					for FROM_VERSION in `seq ${NIPAP_DB_VERSION} $((${CURRENT_DB_VERSION}-1))`; do
						TO_VERSION=$((${FROM_VERSION}+1))
						PSQL_FILE="upgrade-${FROM_VERSION}-${TO_VERSION}.plsql"

						echo -n "Upgrading NIPAP SQL database schema from ${FROM_VERSION} to ${TO_VERSION}, please be patient, this can take a while..."
						su -c "psql -q -d $DB_NAME -f /usr/share/nipap/sql/${PSQL_FILE}" postgres >/dev/null 2>&1 && echo "DONE"
					done

					# load latest NIPAP database triggers
					echo -n "Loading NIPAP SQL database triggers..."
					su -c "psql -q -d $DB_NAME -f /usr/share/nipap/sql/triggers.plsql" postgres >/dev/null 2>&1 && echo "DONE"

					# reset the DB upgrade question
					db_reset nipapd/upgrade
				fi

			else # no db, ie first time install!
				# first time setup
				db_get nipapd/autoconf
				if [ "$RET" = "true" ]; then
					# setup new user
					su -c "createuser -S -D -R -w $DB_USER" postgres >/dev/null 2>&1
					su -c "psql -q -c \"ALTER USER $DB_USER ENCRYPTED PASSWORD '$DB_PASS'\"" postgres >/dev/null 2>&1
					# create database and install plpgsql
					su -c "createdb -O $DB_USER $DB_NAME" postgres >/dev/null 2>&1
					su -c "createlang -d $DB_NAME plpgsql" postgres >/dev/null 2>&1
					# load ip4r
					su -c "psql -q -d $DB_NAME -c 'CREATE EXTENSION ip4r'" postgres >/dev/null 2>&1
					# load NIPAP database structure
					su -c "psql -q -d $DB_NAME -f /usr/share/nipap/sql/ip_net.plsql" postgres >/dev/null 2>&1
					su -c "psql -q -d $DB_NAME -f /usr/share/nipap/sql/functions.plsql" postgres >/dev/null 2>&1
					su -c "psql -q -d $DB_NAME -f /usr/share/nipap/sql/triggers.plsql" postgres >/dev/null 2>&1

					# grant necessary privileges on tables, views, sequences and functions to NIPAP db user
					su -c "psql -q -d $DB_NAME -c 'GRANT SELECT, UPDATE, INSERT, DELETE ON ALL TABLES IN SCHEMA public TO nipap'" postgres >/dev/null 2>&1
					su -c "psql -q -d $DB_NAME -c 'GRANT SELECT, USAGE ON ALL SEQUENCES IN SCHEMA public TO nipap'" postgres >/dev/null 2>&1
					su -c "psql -q -d $DB_NAME -c 'GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA public TO $DB_USER'" postgres >/dev/null 2>&1

					# update nipap.conf with database credentials
					cat /etc/nipap/nipap.conf.dist | sed -e "s/#user *= *[^ ]\+/user = nipap/" -e 's/db_host *= *[^ ]\+/db_host = ""/' -e "s/db_user *= *[^ ]\+/db_user = $DB_USER /" -e "s/db_name *= *[^ ]\+/db_name = $DB_NAME /" -e "s/db_pass *= *[^ ]\+/db_pass = $DB_PASS /" > /etc/nipap/nipap.conf

				fi

				# create local auth database
				nipap-passwd --create-database > /dev/null 2>&1
			fi
		fi

		# set ownership/permissions on the local auth db
		chown -f :nipap /etc/nipap/local_auth.db
		chmod -f 0644 /etc/nipap/local_auth.db

		# upgrade sqlite?
		db_get nipapd/sqlite_upgrade
		if [ "$RET" = "true" ]; then
			nipap-passwd --upgrade-database > /dev/null 2>&1
		fi

		db_stop

		# finally start nipapd
		invoke-rc.d nipapd start
		;;
esac

exit 0
